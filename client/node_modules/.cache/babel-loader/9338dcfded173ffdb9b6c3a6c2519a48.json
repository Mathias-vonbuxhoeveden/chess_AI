{"ast":null,"code":"var _jsxFileName = \"/Users/m.von-buxhoeveden/Desktop/chess_ai_blue_print/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport Chess from 'chess.js';\nimport { Chessboard } from 'react-chessboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PlayVsRandom(_ref) {\n  _s();\n\n  let {\n    boardWidth\n  } = _ref;\n  const chessboardRef = useRef();\n  const [game, setGame] = useState(new Chess());\n  const [arrows, setArrows] = useState([]);\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [currentTimeout, setCurrentTimeout] = useState(undefined);\n\n  function safeGameMutate(modify) {\n    setGame(g => {\n      const update = { ...g\n      };\n      modify(update);\n      return update;\n    });\n  }\n\n  function makeRandomMove() {\n    const possibleMoves = game.moves(); // exit if the game is over\n\n    if (game.game_over() || game.in_draw() || possibleMoves.length === 0) return;\n    const randomIndex = Math.floor(Math.random() * possibleMoves.length);\n    safeGameMutate(game => {\n      game.move(possibleMoves[randomIndex]);\n    });\n  }\n\n  function onDrop(sourceSquare, targetSquare) {\n    const gameCopy = { ...game\n    };\n    const move = gameCopy.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q' // always promote to a queen for example simplicity\n\n    });\n    setGame(gameCopy); // illegal move\n\n    if (move === null) return false; // store timeout so it can be cleared on undo/reset so computer doesn't execute move\n\n    const newTimeout = setTimeout(makeRandomMove, 200);\n    setCurrentTimeout(newTimeout);\n    return true;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n      position: game.fen(),\n      onPieceDrop: onDrop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"rc-button\",\n      onClick: () => {\n        safeGameMutate(game => {\n          game.reset();\n        }); // stop any current timeouts\n\n        clearTimeout(currentTimeout);\n      },\n      children: \"reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"rc-button\",\n      onClick: () => {\n        setBoardOrientation(currentOrientation => currentOrientation === 'white' ? 'black' : 'white');\n      },\n      children: \"flip board\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"rc-button\",\n      onClick: () => {\n        safeGameMutate(game => {\n          game.undo();\n        }); // stop any current timeouts\n\n        clearTimeout(currentTimeout);\n      },\n      children: \"undo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"rc-button\",\n      onClick: () => {\n        setArrows([['a3', 'a5'], ['g1', 'f3']]);\n      },\n      children: \"Set Custom Arrows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayVsRandom, \"jznKThMt7bzLmIma4pYiLOAnIRI=\");\n\n_c = PlayVsRandom;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayVsRandom\");","map":{"version":3,"sources":["/Users/m.von-buxhoeveden/Desktop/chess_ai_blue_print/client/src/App.js"],"names":["useRef","useState","Chess","Chessboard","PlayVsRandom","boardWidth","chessboardRef","game","setGame","arrows","setArrows","boardOrientation","setBoardOrientation","currentTimeout","setCurrentTimeout","undefined","safeGameMutate","modify","g","update","makeRandomMove","possibleMoves","moves","game_over","in_draw","length","randomIndex","Math","floor","random","move","onDrop","sourceSquare","targetSquare","gameCopy","from","to","promotion","newTimeout","setTimeout","fen","reset","clearTimeout","currentOrientation","undo"],"mappings":"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","sourcesContent":["import { useRef, useState } from 'react';\nimport Chess from 'chess.js';\n\nimport { Chessboard } from 'react-chessboard';\n\nexport default function PlayVsRandom({ boardWidth }) {\n  const chessboardRef = useRef();\n  const [game, setGame] = useState(new Chess());\n  const [arrows, setArrows] = useState([]);\n  const [boardOrientation, setBoardOrientation] = useState('white');\n  const [currentTimeout, setCurrentTimeout] = useState(undefined);\n\n  function safeGameMutate(modify) {\n    setGame((g) => {\n      const update = { ...g };\n      modify(update);\n      return update;\n    });\n  }\n\n  function makeRandomMove() {\n    const possibleMoves = game.moves();\n\n    // exit if the game is over\n    if (game.game_over() || game.in_draw() || possibleMoves.length === 0) return;\n\n    const randomIndex = Math.floor(Math.random() * possibleMoves.length);\n    safeGameMutate((game) => {\n      game.move(possibleMoves[randomIndex]);\n    });\n  }\n\n  function onDrop(sourceSquare, targetSquare) {\n    const gameCopy = { ...game };\n    const move = gameCopy.move({\n      from: sourceSquare,\n      to: targetSquare,\n      promotion: 'q' // always promote to a queen for example simplicity\n    });\n    setGame(gameCopy);\n\n    // illegal move\n    if (move === null) return false;\n\n    // store timeout so it can be cleared on undo/reset so computer doesn't execute move\n    const newTimeout = setTimeout(makeRandomMove, 200);\n    setCurrentTimeout(newTimeout);\n    return true;\n  }\n\n  return (\n    <div>\n      <Chessboard position={game.fen()} onPieceDrop={onDrop} \n      />\n      <button\n        className=\"rc-button\"\n        onClick={() => {\n          safeGameMutate((game) => {\n            game.reset();\n          });\n          // stop any current timeouts\n          clearTimeout(currentTimeout);\n        }}\n      >\n        reset\n      </button>\n      <button\n        className=\"rc-button\"\n        onClick={() => {\n          setBoardOrientation((currentOrientation) => (currentOrientation === 'white' ? 'black' : 'white'));\n        }}\n      >\n        flip board\n      </button>\n      <button\n        className=\"rc-button\"\n        onClick={() => {\n          safeGameMutate((game) => {\n            game.undo();\n          });\n          // stop any current timeouts\n          clearTimeout(currentTimeout);\n        }}\n      >\n        undo\n      </button>\n      <button\n        className=\"rc-button\"\n        onClick={() => {\n          setArrows([\n            ['a3', 'a5'],\n            ['g1', 'f3']\n          ]);\n        }}\n      >\n        Set Custom Arrows\n      </button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}