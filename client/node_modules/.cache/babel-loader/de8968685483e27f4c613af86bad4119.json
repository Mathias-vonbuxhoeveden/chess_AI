{"ast":null,"code":"var _jsxFileName = \"/Users/m.von-buxhoeveden/Desktop/chess_project/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [game, setGame] = useState(new Chess()); // perform modify function on game state\n\n  function safeGameMutate(modify) {\n    setGame(g => {\n      const update = { ...g\n      };\n      modify(update);\n      return update;\n    });\n  } // make computer move\n\n\n  function makeRandomMove() {\n    console.log(game.ascii());\n    const possibleMoves = game.moves(); // exit if the game is over\n\n    if (game.game_over() || game.in_draw() || possibleMoves.length === 0) return; // select random move\n\n    const randomIndex = Math.floor(Math.random() * possibleMoves.length); // play random move\n\n    console.log(possibleMoves[randomIndex]);\n    safeGameMutate(game => {\n      game.move('Kd8');\n    });\n  } // perform action when piece dropped by user\n\n\n  function onDrop(sourceSquare, targetSquare) {\n    // attempt move\n    let move = null;\n    safeGameMutate(game => {\n      move = game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: 'q'\n      });\n    }); // illegal move made\n\n    if (move === null) return false; // valid move made, make computer move\n\n    setTimeout(makeRandomMove, 200);\n    return true;\n    console.log(game);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Chessboard, {\n    position: game.fen(),\n    onPieceDrop: onDrop\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n}\n\n_s(App, \"PR4LgXfU0ine+RDS7OWnXVoOg2E=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/m.von-buxhoeveden/Desktop/chess_project/client/src/App.js"],"names":["useState","Chessboard","Chess","App","game","setGame","safeGameMutate","modify","g","update","makeRandomMove","console","log","ascii","possibleMoves","moves","game_over","in_draw","length","randomIndex","Math","floor","random","move","onDrop","sourceSquare","targetSquare","from","to","promotion","setTimeout","fen"],"mappings":";;;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,KAAT,QAAsB,UAAtB;;;AACA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAIE,KAAJ,EAAD,CAAhC,CADa,CAGb;;AACA,WAASI,cAAT,CAAwBC,MAAxB,EAAgC;AAC9BF,IAAAA,OAAO,CAAEG,CAAD,IAAO;AACb,YAAMC,MAAM,GAAG,EAAE,GAAGD;AAAL,OAAf;AACAD,MAAAA,MAAM,CAACE,MAAD,CAAN;AACA,aAAOA,MAAP;AACD,KAJM,CAAP;AAKD,GAVY,CAWb;;;AACA,WAASC,cAAT,GAA0B;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAI,CAACS,KAAL,EAAZ;AACA,UAAMC,aAAa,GAAGV,IAAI,CAACW,KAAL,EAAtB,CAFwB,CAGxB;;AACA,QAAIX,IAAI,CAACY,SAAL,MAAoBZ,IAAI,CAACa,OAAL,EAApB,IAAsCH,aAAa,CAACI,MAAd,KAAyB,CAAnE,EAAsE,OAJ9C,CAKxB;;AACA,UAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,aAAa,CAACI,MAAzC,CAApB,CANwB,CAOxB;;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYE,aAAa,CAACK,WAAD,CAAzB;AAEAb,IAAAA,cAAc,CAAEF,IAAD,IAAU;AACvBA,MAAAA,IAAI,CAACmB,IAAL,CAAU,KAAV;AACD,KAFa,CAAd;AAGD,GAzBY,CA0Bb;;;AACA,WAASC,MAAT,CAAgBC,YAAhB,EAA8BC,YAA9B,EAA4C;AAC1C;AACA,QAAIH,IAAI,GAAG,IAAX;AACAjB,IAAAA,cAAc,CAAEF,IAAD,IAAU;AACvBmB,MAAAA,IAAI,GAAGnB,IAAI,CAACmB,IAAL,CAAU;AACfI,QAAAA,IAAI,EAAEF,YADS;AAEfG,QAAAA,EAAE,EAAEF,YAFW;AAGfG,QAAAA,SAAS,EAAE;AAHI,OAAV,CAAP;AAKD,KANa,CAAd,CAH0C,CAW1C;;AACA,QAAIN,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP,CAZuB,CAa1C;;AACAO,IAAAA,UAAU,CAACpB,cAAD,EAAiB,GAAjB,CAAV;AACA,WAAO,IAAP;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACD;;AACD,sBAAO,QAAC,UAAD;AAAY,IAAA,QAAQ,EAAEA,IAAI,CAAC2B,GAAL,EAAtB;AAAkC,IAAA,WAAW,EAAEP;AAA/C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GA9CQrB,G;;KAAAA,G;AA+CT,eAAeA,GAAf","sourcesContent":["\nimport { useState } from 'react';\nimport { Chessboard } from 'react-chessboard';\nimport { Chess } from 'chess.js';\nfunction App() {\n  const [game, setGame] = useState(new Chess());\n\n  // perform modify function on game state\n  function safeGameMutate(modify) {\n    setGame((g) => {\n      const update = { ...g };\n      modify(update);\n      return update;\n    });\n  }\n  // make computer move\n  function makeRandomMove() {\n    console.log(game.ascii())\n    const possibleMoves = game.moves();\n    // exit if the game is over\n    if (game.game_over() || game.in_draw() || possibleMoves.length === 0) return;\n    // select random move\n    const randomIndex = Math.floor(Math.random() * possibleMoves.length);\n    // play random move\n    console.log(possibleMoves[randomIndex])\n\n    safeGameMutate((game) => {\n      game.move('Kd8');\n    });\n  }\n  // perform action when piece dropped by user\n  function onDrop(sourceSquare, targetSquare) {\n    // attempt move\n    let move = null;\n    safeGameMutate((game) => {\n      move = game.move({\n        from: sourceSquare,\n        to: targetSquare,\n        promotion: 'q'\n      });\n    });\n\n    // illegal move made\n    if (move === null) return false;\n    // valid move made, make computer move\n    setTimeout(makeRandomMove, 200);\n    return true;\n    console.log(game)\n  }\n  return <Chessboard position={game.fen()} onPieceDrop={onDrop} />;\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}